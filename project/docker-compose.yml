services:
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    ports:
      - 3000:3000
    networks:
      - backend
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
      NODE_ENV: production
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    ports:
      - 4000:4000
    networks:
      - backend
    environment:
      QUESTION_SERVICE_HOST: ${QUESTION_SERVICE_HOST}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      MATCHING_SERVICE_HOST: ${MATCHING_SERVICE_HOST}
      NODE_ENV: production
  question-service:
    build:
      context: .
      dockerfile: ./apps/question-service/Dockerfile
    ports:
      - 3001:3001
    networks:
      - backend
    environment:
      QUESTION_SERVICE_HOST: ${QUESTION_SERVICE_HOST}
      SUPABASE_URL: ${QUESTION_SERVICE_SUPABASE_URL}
      SUPABASE_KEY: ${QUESTION_SERVICE_SUPABASE_KEY}
      NODE_ENV: production
  user-service:
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
    ports:
      - 3002:3002
    networks:
      - backend
    environment:
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      SUPABASE_URL: ${USER_SERVICE_SUPABASE_URL}
      SUPABASE_KEY: ${USER_SERVICE_SUPABASE_KEY}
      NODE_ENV: production
  matching-service:
    build:
      context: .
      dockerfile: ./apps/matching-service/Dockerfile
    ports:
      - 3004:3004
    networks:
      - backend
    environment:
      MATCHING_SERVICE_HOST: ${MATCHING_SERVICE_HOST}
      NODE_ENV: production
  rabbitmq:
    build:
      context: ./infra/rabbitmq
      dockerfile: Dockerfile
    container_name: rabbitmq
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" # RabbitMQ message broker port
      - "15672:15672" # RabbitMQ management plugin port

networks:
  backend:
    driver: bridge
